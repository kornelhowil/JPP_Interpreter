-- programs ------------------------------------------------

entrypoints Program ;
Start.   Program ::= [Func] ;

-- functions ------------------------------------------------

FnDef.	   Func ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty Func "" ;
ArgVal. 	   Arg ::= Type Ident;
ArgVar.    Arg ::= "var" Type Ident;
separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;
separator  Stmt "" ;
Empty.     Stmt ::= ";" ;
Decl.      Stmt ::= Type [Item] ";" ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Ass.       Stmt ::= Ident "=" Expr  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;
Print.     Stmt ::= "print" "(" Expr ")" ";" ;
FuncStmt.      Stmt ::= Func ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "bool" ;
Array.     Type ::= Type "[" Expr "]" ;

-- Expressions ---------------------------------------------

EArr.      Expr6 ::= "[" [Expr] "]" ;
EArrVal.   Expr6 ::= Ident "[" [Expr] "]" ;
EVar.      Expr6 ::= Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EString.   Expr6 ::= String ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 6 ;
separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "/*" "*/" ;
