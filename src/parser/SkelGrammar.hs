-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: Show a => AbsGrammar.Program' a -> Result
transProgram x = case x of
  AbsGrammar.Start _ fndefs -> failure x

transFnDef :: Show a => AbsGrammar.FnDef' a -> Result
transFnDef x = case x of
  AbsGrammar.FnDef _ type_ ident argdecs block -> failure x

transArgDec :: Show a => AbsGrammar.ArgDec' a -> Result
transArgDec x = case x of
  AbsGrammar.ArgDec _ type_ ident -> failure x

transBlock :: Show a => AbsGrammar.Block' a -> Result
transBlock x = case x of
  AbsGrammar.Block _ stmts -> failure x

transStmt :: Show a => AbsGrammar.Stmt' a -> Result
transStmt x = case x of
  AbsGrammar.Empty _ -> failure x
  AbsGrammar.Decl _ type_ items -> failure x
  AbsGrammar.Ass _ ident expr -> failure x
  AbsGrammar.Ret _ expr -> failure x
  AbsGrammar.Cond _ expr block -> failure x
  AbsGrammar.CondElse _ expr block1 block2 -> failure x
  AbsGrammar.While _ expr block -> failure x
  AbsGrammar.Print _ expr -> failure x
  AbsGrammar.Println _ expr -> failure x
  AbsGrammar.FuncStmt _ fndef -> failure x
  AbsGrammar.App _ expr -> failure x

transItem :: Show a => AbsGrammar.Item' a -> Result
transItem x = case x of
  AbsGrammar.Item _ ident expr -> failure x

transType :: Show a => AbsGrammar.Type' a -> Result
transType x = case x of
  AbsGrammar.Int _ -> failure x
  AbsGrammar.Str _ -> failure x
  AbsGrammar.Bool _ -> failure x

transExpr :: Show a => AbsGrammar.Expr' a -> Result
transExpr x = case x of
  AbsGrammar.EVar _ ident -> failure x
  AbsGrammar.EInt _ integer -> failure x
  AbsGrammar.ETrue _ -> failure x
  AbsGrammar.EFalse _ -> failure x
  AbsGrammar.EApp _ ident args -> failure x
  AbsGrammar.EString _ string -> failure x
  AbsGrammar.Neg _ expr -> failure x
  AbsGrammar.Not _ expr -> failure x
  AbsGrammar.EMul _ expr1 mulop expr2 -> failure x
  AbsGrammar.EAdd _ expr1 addop expr2 -> failure x
  AbsGrammar.ERel _ expr1 relop expr2 -> failure x
  AbsGrammar.EAnd _ expr1 expr2 -> failure x
  AbsGrammar.EOr _ expr1 expr2 -> failure x

transArg :: Show a => AbsGrammar.Arg' a -> Result
transArg x = case x of
  AbsGrammar.ArgVal _ expr -> failure x
  AbsGrammar.ArgVar _ ident -> failure x

transAddOp :: Show a => AbsGrammar.AddOp' a -> Result
transAddOp x = case x of
  AbsGrammar.Plus _ -> failure x
  AbsGrammar.Minus _ -> failure x

transMulOp :: Show a => AbsGrammar.MulOp' a -> Result
transMulOp x = case x of
  AbsGrammar.Times _ -> failure x
  AbsGrammar.Div _ -> failure x
  AbsGrammar.Mod _ -> failure x

transRelOp :: Show a => AbsGrammar.RelOp' a -> Result
transRelOp x = case x of
  AbsGrammar.LTH _ -> failure x
  AbsGrammar.LE _ -> failure x
  AbsGrammar.GTH _ -> failure x
  AbsGrammar.GE _ -> failure x
  AbsGrammar.EQU _ -> failure x
  AbsGrammar.NE _ -> failure x
